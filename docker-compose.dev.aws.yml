x-aws-vpc: "vpc-05b1872b0642616b7"
x-aws-cloudformation:
  Resources:
    Cluster:
      Type: AWS::ECS::Cluster
      Properties:
        CapacityProviders:
          - FARGATE_SPOT
        DefaultCapacityProviderStrategy:
          - CapacityProvider: FARGATE_SPOT
            Weight: 1
    FrontendService:
      Properties:
        NetworkConfiguration:
          AwsvpcConfiguration:
            Subnets:
              - subnet-04af0996863377d0a #public subnet-1
              - subnet-011d3777f6e1f6187 #public subnet-2
    NginxService:
      Properties:
        NetworkConfiguration:
          AwsvpcConfiguration:
            Subnets:
              - subnet-04af0996863377d0a #public subnet-1
              - subnet-011d3777f6e1f6187 #public subnet-2
    BackendService:
      Properties:
        NetworkConfiguration:
          AwsvpcConfiguration:
            Subnets:
              - subnet-04af0996863377d0a #public subnet-1
              - subnet-011d3777f6e1f6187 #public subnet-2

    ########## ACM SSL Certificates ############
    LoadBalancerSSLCert:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: dev.vietnguyen.me
        DomainValidationOptions:
          - DomainName: dev.vietnguyen.me
            ValidationDomain: dev.vietnguyen.me
          - DomainName: www.dev.vietnguyen.me
            ValidationDomain: dev.vietnguyen.me
          - DomainName: backend.dev.vietnguyen.me
            ValidationDomain: dev.vietnguyen.me
          - DomainName: www.backend.dev.vietnguyen.me
            ValidationDomain: dev.vietnguyen.me
        ValidationMethod: DNS
        SubjectAlternativeNames:
          - dev.vietnguyen.me
          - www.dev.vietnguyen.me
          - backend.dev.vietnguyen.me
          - www.backend.dev.vietnguyen.me

    ########## LoadBalancer ############
    LoadBalancer:
      Properties:
        LoadBalancerAttributes: []
        Type: application
        Subnets:
          - subnet-04af0996863377d0a #public subnet-1
          - subnet-011d3777f6e1f6187 #public subnet-2
    DefaultNetwork:
      Properties:
        SecurityGroupIngress:
          - Description: HTTP IPv4
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - Description: HTTP IPv6
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIpv6: ::/0
          - Description: HTTPS IPv4
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - Description: HTTPS IPv6
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIpv6: ::/0

    ########## LoadBalancer Listeners ############
    NginxTCP82Listener:
      Properties:
        Protocol: HTTP

    NginxTCP82TargetGroup:
      Properties:
        Protocol: HTTP

    BackendTCP81Listener:
      Properties:
        Protocol: HTTP

    BackendTCP81TargetGroup:
      Properties:
        Protocol: HTTP

    HTTPlistener:
      DependsOn:
        - LoadBalancer
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: '443'
              Host: '#{host}'
              Path: /#{path}
              Query: '#{query}'
              StatusCode: HTTP_301
        LoadBalancerArn:
          Ref: LoadBalancer
        Port: 80
        Protocol: HTTP

    HTTPSListener:
      DependsOn:
        - LoadBalancerSSLCert
        - NginxTCP82TargetGroup
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        Certificates:
          - CertificateArn:
              Ref:  LoadBalancerSSLCert
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: NginxTCP82TargetGroup
            Order: 1
        LoadBalancerArn:
          Ref: LoadBalancer
        Port: 443
        Protocol: HTTPS

    ########## Listeners Rules ############
    BackendTCP81ListenerRule:
      DependsOn:
        - BackendTCP81TargetGroup
        - BackendTCP81Listener
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn:
              Ref: BackendTCP81TargetGroup
        Conditions:
          - Field: host-header
            HostHeaderConfig:
              Values:
                - backend.dev.vietnguyen.me
                - www.backend.dev.vietnguyen.me
        ListenerArn:
          Ref: HTTPSListener
        Priority: 1

    ########## Route53 ############
    NginxARecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: Z070724917YT1GVCLNNMA
        Type: A
        Name: dev.vietnguyen.me
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - LoadBalancer
              - DNSName
          HostedZoneId:
            Fn::GetAtt:
              - LoadBalancer
              - CanonicalHostedZoneID
    NginxAWWWRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: Z070724917YT1GVCLNNMA
        Type: A
        Name: www.dev.vietnguyen.me
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - LoadBalancer
              - DNSName
          HostedZoneId:
            Fn::GetAtt:
              - LoadBalancer
              - CanonicalHostedZoneID
    BackendARecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: Z070724917YT1GVCLNNMA
        Type: A
        Name: backend.dev.vietnguyen.me
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - LoadBalancer
              - DNSName
          HostedZoneId:
            Fn::GetAtt:
              - LoadBalancer
              - CanonicalHostedZoneID
    BackendAWWWRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: Z070724917YT1GVCLNNMA
        Type: A
        Name: www.backend.dev.vietnguyen.me
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - LoadBalancer
              - DNSName
          HostedZoneId:
            Fn::GetAtt:
              - LoadBalancer
              - CanonicalHostedZoneID

services:
  frontend:
    image: 900657927515.dkr.ecr.ap-southeast-2.amazonaws.com/vietnguyen-frontend:latest
    deploy:
      x-aws-autoscaling:
        min: 1
        max: 2
        cpu: 65
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
    build:
      context: ./frontend
    ports:
      - "82:82"

  backend:
    image: 900657927515.dkr.ecr.ap-southeast-2.amazonaws.com/vietnguyen-backend:latest
    deploy:
      x-aws-autoscaling:
        min: 1
        max: 2
        cpu: 65
      resources:
        limits:
          cpus: '1'
          memory: 2048M
    build:
      context: ./backend
    environment:
      NODE_ENV: dev
    ports:
      - "81:81"
